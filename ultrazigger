<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>üåü ULTRA ZIGGER üåü</title>
  <style>
    /* ESTILOS GENERALES */
    body {
      margin: 0;
      overflow: hidden;
      background-color: #111;
      background-image: radial-gradient(circle, #222 1px, transparent 1px);
      background-size: 20px 20px;
      color: #fff;
      font-family: 'Arial', sans-serif;
      position: relative;
      width: 100vw;
      height: 100vh;
      cursor: none;
      transition: background-color 0.5s;
    }

    /* PANTALLA DE INICIO */
    #start-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.9);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 2000;
      text-align: center;
    }

    #start-button {
      padding: 15px 30px;
      font-size: 24px;
      background: linear-gradient(to bottom, #00aa00, #007700);
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: transform 0.2s;
      margin: 10px;
    }

    #start-button:hover {
      transform: scale(1.1);
      background: linear-gradient(to bottom, #00cc00, #009900);
    }

    .game-mode-buttons {
      display: flex;
      gap: 15px;
      margin-top: 20px;
    }

    .mode-btn {
      padding: 10px 20px;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid #444;
      border-radius: 5px;
      color: white;
      cursor: pointer;
      transition: all 0.2s;
    }

    .mode-btn:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .mode-btn.active {
      background: #4CAF50;
      border-color: #45a049;
    }

    /* PANTALLA DE GAME OVER */
    #game-over-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.9);
      display: none;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 2000;
      text-align: center;
    }

    #restart-button {
      padding: 15px 30px;
      font-size: 24px;
      background: linear-gradient(to bottom, #aa0000, #770000);
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: transform 0.2s;
      margin-top: 20px;
    }

    #restart-button:hover {
      transform: scale(1.1);
      background: linear-gradient(to bottom, #cc0000, #990000);
    }

    /* INTERFAZ DE JUEGO */
    h1#score {
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 36px;
      z-index: 1000;
      text-shadow: 0 0 10px #00ff00, 0 0 20px #00ff00;
      color: white;
      background-color: rgba(0, 0, 0, 0.7);
      padding: 10px 20px;
      border-radius: 10px;
      border: 2px solid #00ff00;
    }

    #timer {
      position: absolute;
      top: 20px;
      right: 20px;
      font-size: 24px;
      color: #ff5555;
      background-color: rgba(0, 0, 0, 0.7);
      padding: 5px 10px;
      border-radius: 5px;
      z-index: 1000;
    }

    #lives-display {
      position: absolute;
      top: 20px;
      left: 20px;
      font-size: 24px;
      z-index: 1000;
    }

    #coins-display {
      position: absolute;
      top: 60px;
      left: 20px;
      font-size: 24px;
      z-index: 1000;
      color: gold;
    }

    #combo-display {
      position: absolute;
      top: 100px;
      left: 20px;
      font-size: 24px;
      color: #ff00ff;
      text-shadow: 0 0 5px #000;
      z-index: 1000;
    }

    #missions-display {
      position: absolute;
      bottom: 80px;
      left: 20px;
      background: rgba(0, 0, 0, 0.7);
      padding: 10px;
      border-radius: 5px;
      max-width: 250px;
    }

    .mission-item {
      margin: 5px 0;
      display: flex;
      align-items: center;
    }

    .mission-progress {
      margin-left: 5px;
      color: #4CAF50;
    }

    /* OBJETIVOS (TARGETS) */
    .target, .bonus, .trap, .powerup {
      position: absolute;
      width: 110px;
      height: 80px;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      cursor: pointer;
      opacity: 0;
      animation: fadeIn 0.3s forwards, floatY 2s ease-in-out infinite alternate;
      transition: transform 0.2s;
      z-index: 10;
    }

    .target:hover, .bonus:hover, .trap:hover, .powerup:hover {
      transform: scale(1.1);
    }

    .bonus {
      width: 120px;
      height: 90px;
      animation: fadeIn 0.3s forwards, floatY 2s ease-in-out infinite alternate, glow 1.5s ease-in-out infinite alternate;
    }

    .trap {
      filter: hue-rotate(120deg) brightness(1.2);
      animation: fadeIn 0.3s forwards, shake 0.5s ease-in-out infinite alternate;
    }

    .powerup {
      width: 100px;
      height: 100px;
      animation: fadeIn 0.3s forwards, floatY 2s ease-in-out infinite alternate, pulse 1s ease-in-out infinite alternate;
    }

    /* ANIMACIONES */
    @keyframes fadeIn {
      to { opacity: 1; }
    }

    @keyframes floatY {
      0% { transform: translateY(0); }
      100% { transform: translateY(10px); }
    }

    @keyframes glow {
      0% { filter: drop-shadow(0 0 5px gold); }
      100% { filter: drop-shadow(0 0 20px gold); }
    }

    @keyframes shake {
      0% { transform: rotate(-5deg); }
      100% { transform: rotate(5deg); }
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      100% { transform: scale(1.1); }
    }

    /* EFECTO DE EXPLOSI√ìN */
    .explosion {
      position: absolute;
      width: 100px;
      height: 100px;
      background-image: url('https://cdn.pixabay.com/animation/2022/07/29/03/42/03-42-11-849_512.gif');
      background-size: contain;
      pointer-events: none;
      z-index: 999;
      animation: fadeOut 0.5s forwards;
    }

    @keyframes fadeOut {
      to { opacity: 0; transform: scale(1.5); }
    }

    /* LEVEL UP ANIMATION */
    #level-up {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 72px;
      color: gold;
      text-shadow: 0 0 10px #ff0000, 0 0 20px #ff0000;
      opacity: 0;
      z-index: 1001;
      animation: levelUp 2s ease-out;
      pointer-events: none;
    }

    @keyframes levelUp {
      0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
      50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2); }
      100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
    }

    @keyframes pop {
      0% { transform: scale(0.5); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }

    /* OBST√ÅCULOS M√ìVILES */
    .moving-obstacle {
      position: absolute;
      width: 200px;
      height: 20px;
      background-color: #ff5555;
      z-index: 800;
      animation: moveAcross 5s linear infinite;
      pointer-events: none;
    }

    .obstacle-hitbox {
      position: absolute;
      width: 210px;
      height: 30px;
      top: -5px;
      left: -5px;
    }

    @keyframes moveAcross {
      0% { left: -200px; }
      100% { left: 100%; }
    }

    /* MODO FREN√âTICO */
    body.frenzy {
      background-color: #ff0000;
      animation: frenzyBackground 0.5s infinite alternate;
    }

    @keyframes frenzyBackground {
      0% { background-color: #ff0000; }
      100% { background-color: #ff6600; }
    }

    /* JEFE FINAL */
    .boss {
      position: absolute;
      width: 200px;
      height: 200px;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      z-index: 900;
      animation: bossEntrance 1s forwards, bossFloat 3s ease-in-out infinite alternate;
    }

    .boss-health-bar {
      position: absolute;
      bottom: -30px;
      width: 100%;
      height: 10px;
      background-color: #333;
      border-radius: 5px;
      z-index: 901;
    }

    .boss-health-fill {
      height: 100%;
      background-color: #ff0000;
      border-radius: 5px;
      width: 100%;
      transition: width 0.3s;
    }

    @keyframes bossEntrance {
      from { transform: translate(-50%, -150%); }
      to { transform: translate(-50%, -50%); }
    }

    @keyframes bossFloat {
      0% { transform: translate(-50%, -50%) rotate(-5deg); }
      100% { transform: translate(-50%, -50%) rotate(5deg); }
    }

    /* LOGROS */
    .achievement-popup {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: linear-gradient(to right, #ffd700, #ffaa00);
      color: #000;
      padding: 15px;
      border-radius: 10px;
      z-index: 2000;
      animation: slideUp 2s forwards;
      display: flex;
      align-items: center;
    }

    .achievement-icon {
      font-size: 24px;
      margin-right: 10px;
    }

    @keyframes slideUp {
      0% { bottom: -100px; opacity: 0; }
      20% { bottom: 20px; opacity: 1; }
      80% { bottom: 20px; opacity: 1; }
      100% { bottom: -100px; opacity: 0; }
    }

    /* TIENDA DE MEJORAS */
    #shop-menu {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.9);
      padding: 20px;
      border-radius: 10px;
      z-index: 2000;
      display: none;
      text-align: center;
      width: 80%;
      max-width: 500px;
    }

    .shop-item {
      margin: 10px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .buy-btn {
      padding: 5px 10px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    .buy-btn:hover {
      background-color: #45a049;
    }

    .buy-btn:disabled {
      background-color: #777;
      cursor: not-allowed;
    }

    /* PASE DE BATALLA */
    #battle-pass {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.9);
      padding: 20px;
      border-radius: 10px;
      z-index: 2000;
      display: none;
      text-align: center;
      width: 80%;
      max-width: 500px;
    }

    .battle-pass-tier {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: 10px 0;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 5px;
    }

    .tier-reward {
      color: gold;
    }

    /* MEN√ö DE SKINS */
    #skins-menu {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.9);
      padding: 20px;
      border-radius: 10px;
      z-index: 2000;
      display: none;
      text-align: center;
      width: 80%;
      max-width: 500px;
    }

    .skin-option {
      width: 80px;
      height: 80px;
      margin: 10px;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      cursor: pointer;
      border: 2px solid transparent;
      border-radius: 5px;
      transition: transform 0.2s;
    }

    .skin-option:hover {
      transform: scale(1.1);
      border-color: gold;
    }

    .skin-option.selected {
      border-color: #4CAF50;
      box-shadow: 0 0 10px #4CAF50;
    }

    /* BOTONES DE MEN√ö */
    .menu-button {
      position: absolute;
      bottom: 20px;
      padding: 10px 15px;
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      border: 1px solid #444;
      border-radius: 5px;
      cursor: pointer;
      z-index: 1000;
      transition: all 0.2s;
    }

    .menu-button:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }

    #shop-button {
      right: 220px;
    }

    #battle-pass-button {
      right: 120px;
    }

    #skins-button {
      right: 20px;
    }

    /* CURSOR PERSONALIZADO */
    .custom-cursor {
      position: absolute;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.5);
      border: 2px solid #fff;
      pointer-events: none;
      z-index: 10000;
      transform: translate(-50%, -50%);
      mix-blend-mode: difference;
    }

    /* TRAZO DEL CURSOR */
    .cursor-trail {
      position: absolute;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
      transform: translate(-50%, -50%);
      opacity: 0.7;
      transition: opacity 0.3s, transform 0.1s;
    }

    /* EFECTOS ESPECIALES */
    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #f00;
      pointer-events: none;
      z-index: 1000;
      animation: confettiFall 3s linear forwards;
    }

    @keyframes confettiFall {
      0% {
        transform: translateY(-100px) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translateY(100vh) rotate(360deg);
        opacity: 0;
      }
    }

    /* EVENTOS ESPECIALES */
    .event-notification {
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      background: linear-gradient(to right, #ff8a00, #ff0058);
      color: white;
      padding: 15px 30px;
      border-radius: 10px;
      z-index: 2000;
      animation: eventNotification 3s forwards;
    }

    @keyframes eventNotification {
      0% { opacity: 0; transform: translateX(-50%) translateY(-50px); }
      10% { opacity: 1; transform: translateX(-50%) translateY(0); }
      90% { opacity: 1; transform: translateX(-50%) translateY(0); }
      100% { opacity: 0; transform: translateX(-50%) translateY(-50px); }
    }
  </style>
</head>
<body>
  <!-- PANTALLA DE INICIO -->
  <div id="start-screen">
    <h1>üåü ULTRA ZIGGER üåü</h1>
    <button id="start-button">Comenzar</button>
    <div class="game-mode-buttons">
      <button class="mode-btn active" data-mode="classic">Cl√°sico</button>
      <button class="mode-btn" data-mode="survival">Supervivencia</button>
      <button class="mode-btn" data-mode="timeattack">Contrarreloj</button>
    </div>
    <div class="instructions">
      <p>¬°Haz clic en los objetivos para ganar puntos y monedas!</p>
      <p>‚ö†Ô∏è <strong>Bonus (+5 pts)</strong> | <strong>Trampas (-2 pts)</strong> | <strong>Power-ups (habilidades)</strong></p>
      <p>üîπ <strong>Combos</strong> multiplican tus puntos</p>
      <p>üî• <strong>Modos especiales</strong> y <strong>eventos √∫nicos</strong></p>
    </div>
  </div>

  <!-- PANTALLA DE GAME OVER -->
  <div id="game-over-screen">
    <h1>¬°GAME OVER!</h1>
    <h2 id="final-score">Puntuaci√≥n: 0</h2>
    <div class="high-scores">
      <h3>üèÜ Mejores Puntuaciones</h3>
      <ol id="high-scores-list"></ol>
    </div>
    <button id="restart-button">Jugar de Nuevo</button>
  </div>

  <!-- INTERFAZ DE JUEGO -->
  <h1 id="score">Puntos: 0 | Nivel: 1</h1>
  <div id="timer">Pr√≥ximo: 0s</div>
  <div id="lives-display">‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è</div>
  <div id="coins-display">üí∞: 0</div>
  <div id="combo-display"></div>
  <div id="missions-display">
    <h3>Misiones Diarias</h3>
    <div id="missions-list"></div>
  </div>
  <div id="level-up" style="display: none;">¬°LEVEL UP!</div>
  <div id="achievement-popup" class="achievement-popup" style="display: none;">
    <span class="achievement-icon">üèÜ</span>
    <div class="achievement-text"></div>
  </div>

  <!-- BOTONES DE MEN√ö -->
  <button id="shop-button" class="menu-button">üõí Tienda</button>
  <button id="battle-pass-button" class="menu-button">üèÜ Pase de Batalla</button>
  <button id="skins-button" class="menu-button">üé® Skins</button>

  <!-- TIENDA DE MEJORAS -->
  <div id="shop-menu">
    <h2>üõí Tienda de Mejoras</h2>
    <div class="shop-item">
      <div>
        <h3>Vida Extra</h3>
        <p>+1 ‚ù§Ô∏è</p>
      </div>
      <button class="buy-btn" data-upgrade="extraLife" data-cost="100">100 üí∞</button>
    </div>
    <div class="shop-item">
      <div>
        <h3>Puntos Dobles</h3>
        <p>2x puntos por 30s</p>
      </div>
      <button class="buy-btn" data-upgrade="doublePoints" data-cost="150">150 üí∞</button>
    </div>
    <div class="shop-item">
      <div>
        <h3>Congelar Tiempo</h3>
        <p>Detiene objetivos por 5s</p>
      </div>
      <button class="buy-btn" data-upgrade="freezeTime" data-cost="200">200 üí∞</button>
    </div>
    <div class="shop-item">
      <div>
        <h3>Iman de Objetivos</h3>
        <p>Atrae objetivos por 10s</p>
      </div>
      <button class="buy-btn" data-upgrade="magnet" data-cost="250">250 üí∞</button>
    </div>
    <button id="close-shop">Cerrar</button>
  </div>

  <!-- PASE DE BATALLA -->
  <div id="battle-pass">
    <h2>üèÜ Pase de Batalla (Nivel <span id="bp-level">1</span>)</h2>
    <div class="battle-pass-tier">
      <span>Nivel 1: <span class="tier-reward">Skin B√°sica</span></span>
      <button class="claim-btn" data-tier="1">Reclamar</button>
    </div>
    <div class="battle-pass-tier">
      <span>Nivel 3: <span class="tier-reward">+100 üí∞</span></span>
      <button class="claim-btn" data-tier="3">Reclamar</button>
    </div>
    <div class="battle-pass-tier">
      <span>Nivel 5: <span class="tier-reward">Skin √âpica</span></span>
      <button class="claim-btn" data-tier="5">Reclamar</button>
    </div>
    <div class="battle-pass-tier">
      <span>Nivel 10: <span class="tier-reward">Cursor Dorado</span></span>
      <button class="claim-btn" data-tier="10">Reclamar</button>
    </div>
    <button id="close-battle-pass">Cerrar</button>
  </div>

  <!-- MEN√ö DE SKINS -->
  <div id="skins-menu">
    <h2>üé® Skins Disponibles</h2>
    <div class="skin-option selected" data-skin="default" style="background-image: url('https://i.gifer.com/origin/9e/9e578407e529c3e5cc3c2a3f00d9a991_w200.gif')"></div>
    <div class="skin-option" data-skin="alien" style="background-image: url('https://media1.tenor.com/m/tFW57H6ZyUUAAAAd/alien-cat.gif')"></div>
    <div class="skin-option" data-skin="epic" style="background-image: url('https://media1.tenor.com/m/KdhfuQxbq-cAAAAd/furina-genshin-impact.gif')"></div>
    <button id="close-skins">Cerrar</button>
  </div>

  <!-- CURSOR PERSONALIZADO -->
  <div class="custom-cursor" id="custom-cursor"></div>

  <!-- AUDIOS -->
  <audio id="click-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3"></audio>
  <audio id="bonus-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-bonus-earned-in-video-game-2058.mp3"></audio>
  <audio id="trap-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-retro-arcade-lose-2027.mp3"></audio>
  <audio id="powerup-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-unlock-game-notification-253.mp3"></audio>
  <audio id="boss-music" src="https://assets.mixkit.co/music/preview/mixkit-epic-arena-2983.mp3"></audio>
  <audio id="levelup-sound" src="https://assets.mixkit.co/sfx/preview/mixkit-achievement-bell-600.mp3"></audio>

  <!-- SCRIPT DEL JUEGO -->
  <script>
    // =============================================
    // ELEMENTOS DEL DOM
    // =============================================
    const scoreEl = document.getElementById("score");
    const timerEl = document.getElementById("timer");
    const levelUpEl = document.getElementById("level-up");
    const comboDisplay = document.getElementById("combo-display");
    const livesDisplay = document.getElementById("lives-display");
    const coinsDisplay = document.getElementById("coins-display");
    const missionsDisplay = document.getElementById("missions-list");
    const startScreen = document.getElementById("start-screen");
    const startButton = document.getElementById("start-button");
    const gameOverScreen = document.getElementById("game-over-screen");
    const restartButton = document.getElementById("restart-button");
    const finalScoreEl = document.getElementById("final-score");
    const highScoresList = document.getElementById("high-scores-list");
    const achievementPopup = document.getElementById("achievement-popup");
    const achievementText = document.querySelector(".achievement-text");
    const shopMenu = document.getElementById("shop-menu");
    const shopButton = document.getElementById("shop-button");
    const closeShop = document.getElementById("close-shop");
    const battlePassMenu = document.getElementById("battle-pass");
    const battlePassButton = document.getElementById("battle-pass-button");
    const closeBattlePass = document.getElementById("close-battle-pass");
    const bpLevelDisplay = document.getElementById("bp-level");
    const skinsMenu = document.getElementById("skins-menu");
    const skinsButton = document.getElementById("skins-button");
    const closeSkins = document.getElementById("close-skins");
    const customCursor = document.getElementById("custom-cursor");
    const modeButtons = document.querySelectorAll(".mode-btn");

    // =============================================
    // VARIABLES DEL JUEGO
    // =============================================
    let score = 0;
    let coins = 0;
    let level = 1;
    let bpLevel = 1;
    let lives = 3;
    let spawnInterval = 2000;
    let multipleTargets = false;
    let screenWidth = window.innerWidth;
    let screenHeight = window.innerHeight;
    let lastSpawnTime = 0;
    let timerInterval;
    let gameRunning = false;
    let combo = 0;
    let comboMultiplier = 1;
    let comboTimeout;
    let frenzyMode = false;
    let highScores = JSON.parse(localStorage.getItem('highScores')) || [];
    let claimedTiers = JSON.parse(localStorage.getItem('claimedTiers')) || [];
    let currentSkin = 'default';
    let gameMode = 'classic';
    let isMouseBlocked = false;
    let lastValidPosition = { x: 0, y: 0 };
    let clicksToday = 0;
    let trapsAvoided = 0;
    let gameStartTime = 0;
    let totalPlayTime = 0;
    let cursorTrails = [];
    const trailLength = 15;
    let trailIndex = 0;
    let mouseX = 0, mouseY = 0;

    // IM√ÅGENES
    const imageNormal = 'https://th.bing.com/th/id/R.e4344b249ce6be3b57694e758c30654b?rik=OKahgLPaU25WGQ&riu=http%3a%2f%2fstatic.demilked.com%2fwp-content%2fuploads%2f2018%2f03%2f5aaa1cbf88246-funny-weird-wtf-stock-photos-5-5a3916aed5ceb__700.jpg&ehk=SJvazXrhzImcrWnn%2bK9ftsiUcEkEtul%2bIi%2ftlT0SYWw%3d&risl=&pid=ImgRaw&r=0';
    const imageBonus = 'https://media1.tenor.com/m/tFW57H6ZyUUAAAAd/alien-cat.gif';
    const imageTrap = 'https://static01.nyt.com/images/2020/05/27/us/27georgefloyd/27georgefloyd-videoSixteenByNineJumbo1600.jpg';
    const imageFreeze = 'https://dab57h0r8ahff.cloudfront.net/444493/uploads/c3fa2ea0-a5b8-11ea-9b80-23cb8c39deaf_800_420.png';
    const imageFrenzy = 'https://beater.gr/wp-content/uploads/2020/05/funny-weird-wtf-stock-photos-beatergr-41-585x390.jpghttps://media.tenor.com/hqHGfrBb0EEAAAAj/doro-spin-dorothy-nikke.gif';
    const imageMagnet = 'https://cdn-icons-png.flaticon.com/512/3521/3521966.png';
    const imageBoss = 'https://media.tenor.com/jJtTtaMOnNYAAAAM/ryan-gosling-burp.gif';

    // POWER-UPS
    const powerUps = {
      freeze: {
        image: imageFreeze,
        effect: () => {
          document.querySelectorAll('.target, .bonus, .trap').forEach(target => {
            target.style.animationPlayState = 'paused';
          });
          setTimeout(() => {
            document.querySelectorAll('.target, .bonus, .trap').forEach(target => {
              target.style.animationPlayState = 'running';
            });
          }, 5000);
        }
      },
      frenzy: {
        image: imageFrenzy,
        effect: () => {
          activateFrenzyMode();
        }
      },
      magnet: {
        image: imageMagnet,
        effect: () => {
          activateMagnet();
        }
      }
    };

    // MEJORAS COMPRADAS
    const upgrades = {
      extraLife: { active: false },
      doublePoints: { active: false, duration: 0 },
      freezeTime: { active: false },
      magnet: { active: false, duration: 0 }
    };

    // LOGROS
    const achievements = {
      firstClick: { unlocked: false, name: "Primer Click!", desc: "Haz tu primer click", icon: "üëÜ" },
      comboMaster: { unlocked: false, name: "Combo Master", desc: "Alcanza un combo de 5x", icon: "üî•" },
      bossDefeater: { unlocked: false, name: "Cazajefes", desc: "Derrota a un jefe", icon: "üëπ" },
      richPlayer: { unlocked: false, name: "Rico", desc: "Consigue 1000 monedas", icon: "üí∞" },
      survivor: { unlocked: false, name: "Superviviente", desc: "Juega durante 1 hora", icon: "‚è±Ô∏è" }
    };

    // MISIONES DIARIAS
    const dailyMissions = {
      click50: { goal: 50, reward: 100, completed: false, progress: 0, desc: "Haz 50 clicks" },
      avoidTraps: { goal: 10, reward: 150, completed: false, progress: 0, desc: "Evita 10 trampas" },
      reachLevel5: { goal: 5, reward: 200, completed: false, progress: 0, desc: "Alcanza nivel 5" }
    };

    // =============================================
    // FUNCIONES DEL JUEGO
    // =============================================

    // INICIALIZACI√ìN DEL JUEGO
    function initGame() {
      score = 0;
      coins = 0;
      level = 1;
      bpLevel = 1;
      lives = gameMode === 'survival' ? Infinity : 3;
      spawnInterval = 2000;
      multipleTargets = false;
      combo = 0;
      comboMultiplier = 1;
      frenzyMode = false;
      gameStartTime = Date.now();
      
      scoreEl.textContent = `Puntos: ${score} | Nivel: ${level}`;
      coinsDisplay.textContent = `üí∞: ${coins}`;
      livesDisplay.textContent = gameMode === 'survival' ? "‚àû" : "‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è";
      comboDisplay.textContent = "";
      document.body.className = "";
      
      // Limpiar objetivos existentes
      document.querySelectorAll('.target, .bonus, .trap, .powerup, .moving-obstacle, .boss').forEach(el => el.remove());
      
      // Inicializar misiones
      updateMissionsDisplay();
      
      // Inicializar cursor personalizado
      initCursorTrail();
    }

    // INICIALIZAR TRAZO DEL CURSOR
    function initCursorTrail() {
      // Crear part√≠culas del trazo
      for (let i = 0; i < trailLength; i++) {
        const trail = document.createElement('div');
        trail.className = 'cursor-trail';
        trail.style.opacity = 0;
        document.body.appendChild(trail);
        cursorTrails.push(trail);
      }
      
      // Actualizar posici√≥n del cursor
      document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
        
        // Mover cursor personalizado
        customCursor.style.left = `${mouseX}px`;
        customCursor.style.top = `${mouseY}px`;
        
        // Actualizar trazo
        const trail = cursorTrails[trailIndex];
        trail.style.left = `${mouseX}px`;
        trail.style.top = `${mouseY}px`;
        trail.style.opacity = 0.7;
        trail.style.background = `hsl(${Math.random() * 360}, 100%, 50%)`;
        
        // Efecto de desvanecimiento
        setTimeout(() => {
          trail.style.opacity = 0;
          trail.style.transform = 'translate(-50%, -50%) scale(0.5)';
        }, 100);
        
        trail.style.transform = 'translate(-50%, -50%) scale(1)';
        trailIndex = (trailIndex + 1) % trailLength;
      });
    }

    // ACTIVAR MODO FREN√âTICO
    function activateFrenzyMode() {
      frenzyMode = true;
      document.body.classList.add("frenzy");
      
      // Mostrar notificaci√≥n
      showEventNotification("¬°MODO FREN√âTICO ACTIVADO! Puntos dobles por 10 segundos");
      
      setTimeout(() => {
        frenzyMode = false;
        document.body.classList.remove("frenzy");
      }, 10000);
    }

    // ACTIVAR IM√ÅN DE OBJETIVOS
    function activateMagnet() {
      upgrades.magnet.active = true;
      upgrades.magnet.duration = 10;
      
      // Mostrar notificaci√≥n
      showEventNotification("¬°IM√ÅN ACTIVADO! Atrayendo objetivos por 10 segundos");
      
      const magnetInterval = setInterval(() => {
        document.querySelectorAll('.target, .bonus, .powerup').forEach(target => {
          const targetRect = target.getBoundingClientRect();
          const targetX = targetRect.left + targetRect.width / 2;
          const targetY = targetRect.top + targetRect.height / 2;
          
          const dx = mouseX - targetX;
          const dy = mouseY - targetY;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 300) { // Radio de atracci√≥n
            const moveX = dx * 0.05;
            const moveY = dy * 0.05;
            
            target.style.left = `${parseFloat(target.style.left) + moveX}px`;
            target.style.top = `${parseFloat(target.style.top) + moveY}px`;
          }
        });
      }, 50);
      
      setTimeout(() => {
        clearInterval(magnetInterval);
        upgrades.magnet.active = false;
      }, 10000);
    }

    // MOSTRAR NOTIFICACI√ìN DE EVENTO
    function showEventNotification(message) {
      const notification = document.createElement('div');
      notification.className = 'event-notification';
      notification.textContent = message;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // MOSTRAR SUBIDA DE NIVEL
    function showLevelUp() {
      levelUpEl.style.display = "block";
      levelUpEl.style.animation = "none";
      void levelUpEl.offsetWidth;
      levelUpEl.style.animation = "levelUp 2s ease-out";
      document.getElementById("levelup-sound").play();
      
      setTimeout(() => {
        levelUpEl.style.display = "none";
      }, 2000);
    }

    // ACTUALIZAR TEMPORIZADOR
    function updateTimer() {
      const now = Date.now();
      const timeLeft = Math.max(0, Math.floor((lastSpawnTime + spawnInterval - now) / 1000));
      
      if (gameMode === 'timeattack') {
        const elapsed = Math.floor((now - gameStartTime) / 1000);
        const remaining = Math.max(0, 60 - elapsed);
        timerEl.textContent = `Tiempo: ${remaining}s`;
        
        if (remaining <= 0) {
          gameOver();
        }
      } else {
        timerEl.textContent = `Pr√≥ximo: ${timeLeft}s`;
      }
    }

    // ACTUALIZAR MONEDAS
    function updateCoins(amount) {
      coins += amount;
      coinsDisplay.textContent = `üí∞: ${coins}`;
      updateShopButtons();
      
      // Verificar logro de monedas
      if (coins >= 1000 && !achievements.richPlayer.unlocked) {
        unlockAchievement('richPlayer');
      }
    }

    // COMPRAR MEJORA
    function buyUpgrade(upgradeId, cost) {
      if (coins >= cost) {
        coins -= cost;
        coinsDisplay.textContent = `üí∞: ${coins}`;
        
        switch (upgradeId) {
          case 'extraLife':
            lives++;
            livesDisplay.textContent = gameMode === 'survival' ? "‚àû" : "‚ù§Ô∏è".repeat(lives);
            break;
          case 'doublePoints':
            upgrades.doublePoints.active = true;
            upgrades.doublePoints.duration = 30;
            showEventNotification("¬°PUNTOS DOBLES ACTIVADOS! x2 puntos por 30 segundos");
            setTimeout(() => {
              upgrades.doublePoints.active = false;
            }, 30000);
            break;
          case 'freezeTime':
            upgrades.freezeTime.active = true;
            showEventNotification("¬°TIEMPO CONGELADO! Objetivos detenidos por 5 segundos");
            document.querySelectorAll('.target, .bonus, .trap').forEach(target => {
              target.style.animationPlayState = 'paused';
            });
            setTimeout(() => {
              upgrades.freezeTime.active = false;
              document.querySelectorAll('.target, .bonus, .trap').forEach(target => {
                target.style.animationPlayState = 'running';
              });
            }, 5000);
            break;
          case 'magnet':
            activateMagnet();
            break;
        }
        
        updateShopButtons();
      }
    }

    // ACTUALIZAR BOTONES DE LA TIENDA
    function updateShopButtons() {
      document.querySelectorAll('.buy-btn').forEach(btn => {
        const cost = parseInt(btn.dataset.cost);
        btn.disabled = coins < cost;
      });
    }

    // RECLAMAR RECOMPENSA DEL PASE DE BATALLA
    function claimTierReward(tier) {
      if (bpLevel >= tier && !claimedTiers.includes(tier)) {
        claimedTiers.push(tier);
        localStorage.setItem('claimedTiers', JSON.stringify(claimedTiers));
        
        switch (tier) {
          case 1:
            showEventNotification("¬°Skin b√°sica desbloqueada!");
            break;
          case 3:
            updateCoins(100);
            showEventNotification("¬°+100 monedas!");
            break;
          case 5:
            showEventNotification("¬°Skin √©pica desbloqueada!");
            break;
          case 10:
            showEventNotification("¬°Cursor dorado desbloqueado!");
            customCursor.style.background = 'gold';
            customCursor.style.borderColor = 'darkgoldenrod';
            break;
        }
        
        updateBattlePassButtons();
      }
    }

    // ACTUALIZAR BOTONES DEL PASE DE BATALLA
    function updateBattlePassButtons() {
      document.querySelectorAll('.claim-btn').forEach(btn => {
        const tier = parseInt(btn.dataset.tier);
        btn.disabled = bpLevel < tier || claimedTiers.includes(tier);
        btn.textContent = claimedTiers.includes(tier) ? "‚úÖ Reclamado" : "Reclamar";
      });
    }

    // CAMBIAR SKIN
    function changeSkin(skin) {
      currentSkin = skin;
      document.querySelectorAll('.skin-option').forEach(opt => {
        opt.classList.remove('selected');
      });
      document.querySelector(`.skin-option[data-skin="${skin}"]`).classList.add('selected');
      
      // Aqu√≠ podr√≠as cambiar la imagen de los objetivos seg√∫n la skin seleccionada
      showEventNotification(`Skin "${skin}" seleccionada`);
    }

    // DESBLOQUEAR LOGRO
    function unlockAchievement(id) {
      achievements[id].unlocked = true;
      achievementText.innerHTML = `<strong>${achievements[id].name}</strong><br>${achievements[id].desc}`;
      achievementPopup.querySelector('.achievement-icon').textContent = achievements[id].icon;
      achievementPopup.style.display = "flex";
      
      // Efecto de confeti
      spawnConfetti(20);
      
      setTimeout(() => {
        achievementPopup.style.display = "none";
      }, 3000);
    }

    // EFECTO DE CONFETI
    function spawnConfetti(count) {
      for (let i = 0; i < count; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = `${Math.random() * 100}vw`;
        confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
        confetti.style.animationDuration = `${2 + Math.random() * 3}s`;
        document.body.appendChild(confetti);
        
        setTimeout(() => {
          confetti.remove();
        }, 3000);
      }
    }

    // ACTUALIZAR MISIONES
    function updateMissions() {
      // Misi√≥n de clicks
      if (!dailyMissions.click50.completed) {
        dailyMissions.click50.progress = clicksToday;
        if (clicksToday >= dailyMissions.click50.goal) {
          dailyMissions.click50.completed = true;
          updateCoins(dailyMissions.click50.reward);
          showEventNotification("¬°Misi√≥n completada! +100 monedas");
        }
      }
      
      // Misi√≥n de trampas evitadas
      if (!dailyMissions.avoidTraps.completed) {
        dailyMissions.avoidTraps.progress = trapsAvoided;
        if (trapsAvoided >= dailyMissions.avoidTraps.goal) {
          dailyMissions.avoidTraps.completed = true;
          updateCoins(dailyMissions.avoidTraps.reward);
          showEventNotification("¬°Misi√≥n completada! +150 monedas");
        }
      }
      
      // Misi√≥n de nivel
      if (!dailyMissions.reachLevel5.completed) {
        dailyMissions.reachLevel5.progress = level;
        if (level >= dailyMissions.reachLevel5.goal) {
          dailyMissions.reachLevel5.completed = true;
          updateCoins(dailyMissions.reachLevel5.reward);
          showEventNotification("¬°Misi√≥n completada! +200 monedas");
        }
      }
      
      updateMissionsDisplay();
    }

    // ACTUALIZAR VISUALIZACI√ìN DE MISIONES
    function updateMissionsDisplay() {
      missionsDisplay.innerHTML = '';
      
      Object.entries(dailyMissions).forEach(([key, mission]) => {
        const missionEl = document.createElement('div');
        missionEl.className = 'mission-item';
        
        const status = mission.completed ? '‚úÖ' : 'üü°';
        missionEl.innerHTML = `
          ${status} ${mission.desc} 
          <span class="mission-progress">(${mission.progress}/${mission.goal})</span>
        `;
        
        missionsDisplay.appendChild(missionEl);
      });
    }

    // VERIFICAR COLISI√ìN CON OBST√ÅCULOS
    function checkObstacleCollision(x, y) {
      const obstacles = document.querySelectorAll('.obstacle-hitbox');
      for (const obstacle of obstacles) {
        const rect = obstacle.getBoundingClientRect();
        if (x > rect.left && x < rect.right && y > rect.top && y < rect.bottom) {
          return true;
        }
      }
      return false;
    }

    // SPAWNEAR OBJETIVOS
    function spawn(type = "normal") {
      const target = document.createElement("div");
      let points = 1;
      let lifetime = 5000;
      target.classList.add("target");

      if (type === "bonus") {
        target.classList.add("bonus");
        target.style.backgroundImage = `url('${imageBonus}')`;
        points = 5;
        lifetime = 3000;
      } else if (type === "trap") {
        target.classList.add("trap");
        target.style.backgroundImage = `url('${imageTrap}')`;
        points = -2;
      } else if (type === "powerup") {
        target.classList.add("powerup");
        const powerUpKeys = Object.keys(powerUps);
        const randomPowerUp = powerUpKeys[Math.floor(Math.random() * powerUpKeys.length)];
        target.style.backgroundImage = `url('${powerUps[randomPowerUp].image}')`;
        points = 0;
        target.dataset.powerup = randomPowerUp;
      } else {
        target.style.backgroundImage = `url('${imageNormal}')`;
      }

      // OBJETIVOS M√ÅS PEQUE√ëOS EN NIVELES ALTOS
      if (level > 5) {
        target.style.width = `${110 - level * 2}px`;
        target.style.height = `${80 - level * 2}px`;
      }

      const x = Math.floor(Math.random() * (screenWidth - 120));
      const y = Math.floor(Math.random() * (screenHeight - 100));

      target.style.left = `${x}px`;
      target.style.top = `${y}px`;

      target.addEventListener("mouseenter", () => {
        // SONIDOS
        if (type === "bonus") {
          document.getElementById("bonus-sound").currentTime = 0;
          document.getElementById("bonus-sound").play();
        } else if (type === "trap") {
          document.getElementById("trap-sound").currentTime = 0;
          document.getElementById("trap-sound").play();
        } else if (type === "powerup") {
          document.getElementById("powerup-sound").currentTime = 0;
          document.getElementById("powerup-sound").play();
        } else {
          document.getElementById("click-sound").currentTime = 0;
          document.getElementById("click-sound").play();
        }

        // CONTAR CLICKS PARA MISIONES
        clicksToday++;
        updateMissions();

        // SISTEMA DE COMBO
        combo++;
        clearTimeout(comboTimeout);
        comboTimeout = setTimeout(() => {
          combo = 0;
          comboMultiplier = 1;
          comboDisplay.textContent = "";
        }, 2000);

        if (combo >= 3) {
          comboMultiplier = Math.min(Math.floor(combo / 3) + 1, 5);
          comboDisplay.textContent = `COMBO x${comboMultiplier}!`;
          comboDisplay.style.left = `${x}px`;
          comboDisplay.style.top = `${y - 50}px`;
          setTimeout(() => comboDisplay.textContent = "", 1000);
          
          // Verificar logro de combo
          if (comboMultiplier >= 5 && !achievements.comboMaster.unlocked) {
            unlockAchievement('comboMaster');
          }
        }

        // APLICAR PUNTOS
        if (type === "powerup") {
          powerUps[target.dataset.powerup].effect();
        } else {
          // Aplicar multiplicador de puntos dobles si est√° activo
          const pointMultiplier = upgrades.doublePoints.active ? 2 : 1;
          score += points * comboMultiplier * pointMultiplier;
          updateCoins(points); // Ganar monedas por cada click
          
          if (score < 0) score = 0;

          // SUBIR DE NIVEL CADA 15 PUNTOS
          const newLevel = Math.floor(score / 15) + 1;
          if (newLevel > level) {
            level = newLevel;
            bpLevel = newLevel; // El pase de batalla sube con el nivel del juego
            
            // Verificar misi√≥n de nivel
            updateMissions();
            
            if (spawnInterval > 400) {
              spawnInterval -= 150;
            }
            showLevelUp();
          }

          scoreEl.textContent = `Puntos: ${score} | Nivel: ${level}`;
        }

        // MANEJAR TRAMPAS
        if (type === "trap") {
          if (gameMode !== 'survival') {
            lives--;
            updateLives();
            if (lives <= 0) {
              gameOver();
            }
          }
        } else {
          // Contar como trampa evitada si no se hizo click
          trapsAvoided++;
          updateMissions();
        }

        createExplosion(x + 60, y + 40);
        target.remove();
      });

      document.body.appendChild(target);

      setTimeout(() => {
        if (document.body.contains(target)) {
          target.remove();
        }
      }, lifetime);
    }

    // SPAWNEAR POWER-UPS
    function spawnPowerUp() {
      spawn("powerup");
    }

    // SPAWNEAR OBST√ÅCULOS M√ìVILES
    function spawnMovingObstacle() {
      const obstacle = document.createElement("div");
      obstacle.className = "moving-obstacle";
      const topPos = Math.random() * (screenHeight - 50);
      obstacle.style.top = `${topPos}px`;
      obstacle.style.animationDuration = `${Math.random() * 5 + 5}s`;
      
      // A√±adir hitbox de colisi√≥n
      const hitbox = document.createElement("div");
      hitbox.className = "obstacle-hitbox";
      obstacle.appendChild(hitbox);
      
      document.body.appendChild(obstacle);

      setTimeout(() => {
        if (document.body.contains(obstacle)) {
          obstacle.remove();
        }
      }, 10000);
    }

    // ACTUALIZAR VIDAS
    function updateLives() {
      if (gameMode === 'survival') return;
      
      livesDisplay.textContent = "‚ù§Ô∏è".repeat(lives);
    }

    // SPAWNEAR JEFE FINAL
    function spawnBoss() {
      if (level % 5 === 0) {
        gameRunning = false;
        
        const boss = document.createElement("div");
        boss.className = "boss";
        boss.style.backgroundImage = `url('${imageBoss}')`;
        boss.dataset.health = 10;
        
        // Barra de salud del jefe
        const healthBar = document.createElement("div");
        healthBar.className = "boss-health-bar";
        const healthFill = document.createElement("div");
        healthFill.className = "boss-health-fill";
        healthBar.appendChild(healthFill);
        boss.appendChild(healthBar);
        
        boss.addEventListener("click", () => {
          boss.dataset.health--;
          healthFill.style.width = `${boss.dataset.health * 10}%`;
          
          if (boss.dataset.health <= 0) {
            score += 50;
            updateCoins(50);
            achievements.bossDefeater.unlocked = true;
            unlockAchievement('bossDefeater');
            boss.remove();
            gameRunning = true;
            gameLoop();
          }
        });
        
        document.body.appendChild(boss);
        document.getElementById("boss-music").play();
      }
    }

    // GAME OVER
    function gameOver() {
      gameRunning = false;
      clearInterval(timerInterval);
      
      // Calcular tiempo de juego
      totalPlayTime += (Date.now() - gameStartTime) / 1000;
      
      // Verificar logro de supervivencia
      if (totalPlayTime >= 3600 && !achievements.survivor.unlocked) {
        unlockAchievement('survivor');
      }
      
      saveScore();
      showGameOver();
    }

    // MOSTRAR GAME OVER
    function showGameOver() {
      finalScoreEl.textContent = `Puntuaci√≥n: ${score}`;
      updateHighScoresList();
      gameOverScreen.style.display = "flex";
    }

    // GUARDAR PUNTUACI√ìN
    function saveScore() {
      highScores.push(score);
      highScores.sort((a, b) => b - a);
      highScores = highScores.slice(0, 5);
      localStorage.setItem('highScores', JSON.stringify(highScores));
    }

    // ACTUALIZAR LISTA DE PUNTUACIONES
    function updateHighScoresList() {
      highScoresList.innerHTML = "";
      highScores.forEach((score, index) => {
        const li = document.createElement("li");
        li.textContent = `${index + 1}. ${score}`;
        highScoresList.appendChild(li);
      });
    }

    // BUCLE PRINCIPAL DEL JUEGO
    function gameLoop() {
      if (!gameRunning) return;

      const rand = Math.random();
      lastSpawnTime = Date.now();

      // 20% PROBABILIDAD BONUS
      if (rand < 0.20) {
        spawn("bonus");
      }
      // 15% PROBABILIDAD TRAMPA
      else if (rand < 0.35) {
        spawn("trap");
      }
      // 5% PROBABILIDAD POWER-UP
      else if (rand < 0.40) {
        spawnPowerUp();
      }
      // NORMAL
      else {
        if (multipleTargets) {
          const targetsToSpawn = Math.min(1 + Math.floor(level / 2), 5);
          for (let i = 0; i < targetsToSpawn; i++) {
            setTimeout(() => spawn(), i * 200);
          }
        } else {
          spawn();
        }
      }

      // OBST√ÅCULOS EN NIVELES ALTOS
      if (level > 3 && Math.random() < 0.1) {
        spawnMovingObstacle();
      }

      // JEFE FINAL CADA 5 NIVELES
      if (level % 5 === 0) {
        spawnBoss();
      }

      if (spawnInterval <= 400) {
        multipleTargets = true;
      }

      setTimeout(gameLoop, spawnInterval);
    }

    // DETECTAR COLISI√ìN CON OBST√ÅCULOS
    document.addEventListener('mousemove', (e) => {
      if (!checkObstacleCollision(e.clientX, e.clientY)) {
        lastValidPosition = { x: e.clientX, y: e.clientY };
        isMouseBlocked = false;
      } else if (!isMouseBlocked) {
        isMouseBlocked = true;
        // Forzar cursor a la √∫ltima posici√≥n v√°lida
        window.dispatchEvent(new MouseEvent('mousemove', {
          clientX: lastValidPosition.x,
          clientY: lastValidPosition.y
        }));
      }
    });

    // =============================================
    // EVENT LISTENERS
    // =============================================
    startButton.addEventListener("click", () => {
      startScreen.style.display = "none";
      initGame();
      gameRunning = true;
      gameLoop();
      timerInterval = setInterval(updateTimer, 100);
    });

    restartButton.addEventListener("click", () => {
      gameOverScreen.style.display = "none";
      initGame();
      gameRunning = true;
      gameLoop();
      timerInterval = setInterval(updateTimer, 100);
    });

    // Botones de men√∫
    shopButton.addEventListener("click", () => {
      shopMenu.style.display = "block";
      updateShopButtons();
    });

    closeShop.addEventListener("click", () => {
      shopMenu.style.display = "none";
    });

    battlePassButton.addEventListener("click", () => {
      battlePassMenu.style.display = "block";
      bpLevelDisplay.textContent = bpLevel;
      updateBattlePassButtons();
    });

    closeBattlePass.addEventListener("click", () => {
      battlePassMenu.style.display = "none";
    });

    skinsButton.addEventListener("click", () => {
      skinsMenu.style.display = "block";
    });

    closeSkins.addEventListener("click", () => {
      skinsMenu.style.display = "none";
    });

    // Botones de compra
    document.querySelectorAll('.buy-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        buyUpgrade(btn.dataset.upgrade, parseInt(btn.dataset.cost));
      });
    });

    // Botones de reclamar recompensas
    document.querySelectorAll('.claim-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        claimTierReward(parseInt(btn.dataset.tier));
      });
    });

    // Botones de skins
    document.querySelectorAll('.skin-option').forEach(skin => {
      skin.addEventListener('click', () => {
        changeSkin(skin.dataset.skin);
      });
    });

    // Botones de modo de juego
    modeButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        modeButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        gameMode = btn.dataset.mode;
      });
    });

    // AJUSTAR TAMA√ëO AL CAMBIAR VENTANA
    window.addEventListener('resize', () => {
      screenWidth = window.innerWidth;
      screenHeight = window.innerHeight;
    });

    // MOSTRAR PANTALLA DE INICIO
    updateHighScoresList();
  </script>
</body>
</html>
